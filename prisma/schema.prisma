generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int       @id @default(autoincrement())
  email            String    @unique
  username         String    @default("Krystal User")
  avatar           String?
  background       String?
  description      String?
  status           String
  socketId         String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  posts            Post[]
  like             Like[]
  comment          Comment[]
  follower         Follow[]  @relation("follower")
  following        Follow[]  @relation("following")
  sentMessages     Chat[]    @relation("sentMessages")
  receivedMessages Chat[]    @relation("receivedMessages")

  @@map("users")
}

model Otp {
  id         Int      @id @default(autoincrement())
  secret     String
  validUntil DateTime
  email      String

  @@map("otps")
}

model Post {
  id        Int       @id @default(autoincrement())
  content   String
  media     String[]
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  like      Like[]
  Comment   Comment[]

  @@map("posts")
}

model Like {
  userId    Int
  postId    Int
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, postId])
  @@map("likes")
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  userId    Int
  postId    Int
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("comments")
}

model Follow {
  followerId  Int
  follower    User     @relation("follower", fields: [followerId], references: [id])
  followingId Int
  following   User     @relation("following", fields: [followingId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([followerId, followingId])
  @@map("follows")
}

model Chat {
  id         Int      @id @default(autoincrement())
  senderId   Int
  sender     User     @relation("sentMessages", fields: [senderId], references: [id])
  receiverId Int
  receiver   User     @relation("receivedMessages", fields: [receiverId], references: [id])
  message    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("chats")
}
